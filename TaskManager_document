# Документация к коду "Task Manager"

Данный проект представляет собой приложение для управления задачами с использованием библиотеки **PyQt6**. Оно предназначено для добавления, удаления, сортировки и сохранения задач с указанием их приоритета и дедлайна. Все данные сохраняются локально в бинарном файле.

---

## Основные возможности приложения

1. **Добавление задачи**:
   - Пользователь вводит название задачи.
   - Устанавливает приоритет задачи (низкий, средний, высокий).
   - Указывает дату дедлайна.
   - Задача добавляется в список и сохраняется в файл.

2. **Удаление задачи**:
   - Позволяет удалить выбранную задачу из списка.

3. **Сортировка задач**:
   - По приоритету (в порядке: низкий → средний → высокий).
   - По дедлайну (в порядке от ближайшего к дальнейшему).

4. **Сохранение задач**:
   - Все задачи сохраняются в файл `tasks.pkl` для последующего восстановления.

5. **Загрузка задач**:
   - При запуске программы или нажатии кнопки загрузки, задачи восстанавливаются из файла `tasks.pkl`.

---

## Основной класс: `TaskManager`

Класс **`TaskManager`** наследуется от **`QWidget`** и определяет логику и пользовательский интерфейс приложения.

### 1. Конструктор: `__init__`
- Инициализирует интерфейс с помощью метода `init_ui`.
- Загружает сохраненные задачи из файла с помощью метода `load_tasks`.

**Аргументы:**
- Нет аргументов.

---

### 2. Метод: `init_ui`
Отвечает за создание и настройку пользовательского интерфейса.

#### Основные элементы интерфейса:
1. **Поле ввода задачи (`QLineEdit`)**:
   - Ввод текста для новой задачи.
   - Содержит подсказку: *"Введите задачу"*.

2. **Выбор приоритета (`QComboBox`)**:
   - Выпадающий список с тремя значениями: низкий, средний, высокий.

3. **Выбор дедлайна (`QDateEdit`)**:
   - Поле для выбора даты дедлайна.
   - По умолчанию устанавливается текущая дата.

4. **Список задач (`QListWidget`)**:
   - Отображает добавленные задачи.
   - Каждая задача имеет формат:
     ```
     <Название задачи> | Приоритет: <значение> | Дедлайн: <дата>
     ```

5. **Кнопки управления (`QPushButton`)**:
   - **Добавить задачу**: добавляет задачу в список.
   - **Удалить задачу**: удаляет выделенную задачу.
   - **Сортировать по приоритету**: сортирует задачи.
   - **Сортировать по дедлайну**: сортирует задачи по дате.
   - **Сохранить задачи**: сохраняет список задач в файл.
   - **Загрузить задачи**: загружает список задач из файла.

6. **Макеты (`QVBoxLayout`, `QHBoxLayout`)**:
   - Организуют элементы интерфейса вертикально и горизонтально.

---

### 3. Метод: `add_task`
Добавляет новую задачу в список.

**Алгоритм:**
1. Получает текст задачи из поля ввода.
2. Читает выбранные значения приоритета и дедлайна.
3. Формирует строку задачи и добавляет её в `QListWidget`.
4. Если поле ввода пустое, отображается предупреждение.

---

### 4. Метод: `delete_task`
Удаляет выбранную задачу из списка.

**Алгоритм:**
1. Определяет индекс выделенной задачи.
2. Если задача выбрана, она удаляется из `QListWidget`.
3. Если нет выделенной задачи, выводится предупреждение.

---

### 5. Метод: `sort_by_priority`
Сортирует задачи по приоритету.

**Алгоритм:**
1. Считывает текст всех задач из `QListWidget`.
2. Определяет индекс приоритета по значению: **Низкий** → 0, **Средний** → 1, **Высокий** → 2.
3. Сортирует список задач по индексу приоритета.
4. Очищает `QListWidget` и добавляет отсортированные задачи.

---

### 6. Метод: `sort_by_deadline`
Сортирует задачи по дате дедлайна.

**Алгоритм:**
1. Считывает текст всех задач из `QListWidget`.
2. Извлекает дату дедлайна из каждой строки задачи.
3. Сортирует задачи по извлеченной дате.
4. Очищает `QListWidget` и добавляет отсортированные задачи.

---

### 7. Метод: `save_tasks`
Сохраняет текущий список задач в файл `tasks.pkl` с использованием модуля `pickle`.

**Алгоритм:**
1. Считывает все строки задач из `QListWidget`.
2. Записывает их в файл в бинарном формате.

---

### 8. Метод: `load_tasks`
Загружает задачи из файла `tasks.pkl`.

**Алгоритм:**
1. Проверяет наличие файла.
2. Если файл существует, считывает его содержимое и заполняет `QListWidget`.
3. Если файла нет или произошла ошибка, отображается соответствующее сообщение.

---

## Взаимодействие с файлами

1. **Сохранение задач**:
   - Список задач сохраняется в бинарном файле `tasks.pkl` через модуль `pickle`.
   - Формат хранения: список строк, каждая строка представляет одну задачу.

2. **Загрузка задач**:
   - Файл считывается при запуске приложения.
   - Если файла нет, программа продолжает работу без ошибок.

---

## Требования к окружению

1. **Зависимости**:
   - Python 3.9+
   - Библиотека PyQt6:
     ```bash
     pip install PyQt6
     ```

2. **Файлы**:
   - Скрипт: `task_manager.py`.
   - Файл данных: `tasks.pkl` (создается автоматически).

---

## Запуск приложения

1. Запустите скрипт:
   ```bash
   python task_manager.py
   ```
2. Интерфейс приложения откроется в новом окне.

---

## Возможные улучшения

1. **Интеграция с базой данных**:
   - Хранение задач в SQLite вместо локального файла.
2. **Фильтрация задач**:
   - Добавить возможность фильтровать задачи по приоритету или дате.
3. **Многостраничный интерфейс**:
   - Внедрить вкладки для разных категорий задач.
4. **Мультиязычный интерфейс**:
   - Реализовать поддержку нескольких языков (например, русский и английский).

---

## Вывод

Приложение предоставляет удобный интерфейс для управления задачами. Благодаря возможности сохранения и загрузки данных, задачи сохраняются между запусками программы. Код легко расширяется и может быть адаптирован под различные потребности пользователей.
